// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// BrandDELETEHandlerFunc turns a function with the right signature into a brand d e l e t e handler
type BrandDELETEHandlerFunc func(BrandDELETEParams, *int) BrandDELETEResponder

// Handle executing the request and returning a response
func (fn BrandDELETEHandlerFunc) Handle(params BrandDELETEParams, principal *int) BrandDELETEResponder {
	return fn(params, principal)
}

// BrandDELETEHandler interface for that can handle valid brand d e l e t e params
type BrandDELETEHandler interface {
	Handle(BrandDELETEParams, *int) BrandDELETEResponder
}

// NewBrandDELETE creates a new http.Handler for the brand d e l e t e operation
func NewBrandDELETE(ctx *middleware.Context, handler BrandDELETEHandler) *BrandDELETE {
	return &BrandDELETE{Context: ctx, Handler: handler}
}

/*BrandDELETE swagger:route DELETE /brand brandDELETE

Delete brand

*/
type BrandDELETE struct {
	Context *middleware.Context
	Handler BrandDELETEHandler
}

func (o *BrandDELETE) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBrandDELETEParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *int
	if uprinc != nil {
		principal = uprinc.(*int) // this is really a int, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
