// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// BrandDeleteHandlerFunc turns a function with the right signature into a brand delete handler
type BrandDeleteHandlerFunc func(BrandDeleteParams, *string) BrandDeleteResponder

// Handle executing the request and returning a response
func (fn BrandDeleteHandlerFunc) Handle(params BrandDeleteParams, principal *string) BrandDeleteResponder {
	return fn(params, principal)
}

// BrandDeleteHandler interface for that can handle valid brand delete params
type BrandDeleteHandler interface {
	Handle(BrandDeleteParams, *string) BrandDeleteResponder
}

// NewBrandDelete creates a new http.Handler for the brand delete operation
func NewBrandDelete(ctx *middleware.Context, handler BrandDeleteHandler) *BrandDelete {
	return &BrandDelete{Context: ctx, Handler: handler}
}

/*BrandDelete swagger:route DELETE /brand brandDelete

Delete brand

*/
type BrandDelete struct {
	Context *middleware.Context
	Handler BrandDeleteHandler
}

func (o *BrandDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBrandDeleteParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *string
	if uprinc != nil {
		principal = uprinc.(*string) // this is really a string, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
