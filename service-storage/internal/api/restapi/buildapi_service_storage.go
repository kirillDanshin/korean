// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"io"
	"net/http"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"

	"storage/internal/api/restapi/operations"
)

func BuildAPI(
	swaggerSpec *loads.Document,
	ServeError func(http.ResponseWriter, *http.Request, error),
	Logger func(string, ...interface{}),

	JSONConsumer func(r io.Reader, target interface{}) error,
	MultipartformConsumer func(r io.Reader, target interface{}) error,

	JSONProducer func(w io.Writer, data interface{}) error,

	APIKeyAuth func(token string) (*string, error),
	APIAuthorizer runtime.Authorizer,

	BrandCreate func(params operations.BrandCreateParams, principal *string) operations.BrandCreateResponder,
	BrandDelete func(params operations.BrandDeleteParams, principal *string) operations.BrandDeleteResponder,
	Login func(params operations.LoginParams) operations.LoginResponder,
	ProductCreate func(params operations.ProductCreateParams, principal *string) operations.ProductCreateResponder,
	ProductDelete func(params operations.ProductDeleteParams, principal *string) operations.ProductDeleteResponder,

	ServerShutdown func(),

) *operations.ServiceStorageAPI {
	api := operations.NewServiceStorageAPI(swaggerSpec)

	if ServeError != nil {
		api.ServeError = errors.ServeError
	}

	if Logger != nil {
		api.Logger = Logger
	}

	if JSONConsumer != nil {
		api.JSONConsumer = runtime.ConsumerFunc(JSONConsumer)
	}

	if MultipartformConsumer != nil {
		api.MultipartformConsumer = runtime.ConsumerFunc(MultipartformConsumer)
	}

	if JSONProducer != nil {
		api.JSONProducer = runtime.ProducerFunc(JSONProducer)
	}

	if APIKeyAuth != nil {
		api.APIKeyAuth = APIKeyAuth
	}
	if APIAuthorizer != nil {
		api.APIAuthorizer = APIAuthorizer
	}

	if BrandCreate != nil {
		api.BrandCreateHandler = operations.BrandCreateHandlerFunc(BrandCreate)
	}

	if BrandDelete != nil {
		api.BrandDeleteHandler = operations.BrandDeleteHandlerFunc(BrandDelete)
	}

	if Login != nil {
		api.LoginHandler = operations.LoginHandlerFunc(Login)
	}

	if ProductCreate != nil {
		api.ProductCreateHandler = operations.ProductCreateHandlerFunc(ProductCreate)
	}

	if ProductDelete != nil {
		api.ProductDeleteHandler = operations.ProductDeleteHandlerFunc(ProductDelete)
	}

	if ServerShutdown != nil {
		api.ServerShutdown = ServerShutdown
	}

	return api
}
