// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Service storage brands and cosmetics.",
    "title": "Service-storage",
    "version": "0.0.1"
  },
  "basePath": "/api/storage",
  "paths": {
    "/brand": {
      "post": {
        "description": "Create new brand",
        "operationId": "brandPOST",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrandCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "default": {
            "$ref": "#/responses/GenericError"
          }
        }
      },
      "delete": {
        "description": "Delete brand",
        "operationId": "brandDELETE",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContent"
          },
          "default": {
            "$ref": "#/responses/GenericError"
          }
        }
      }
    },
    "/login": {
      "post": {
        "security": [],
        "description": "Auth method.",
        "operationId": "login",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LoginInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            },
            "headers": {
              "AdminCookie": {
                "type": "string",
                "description": "Session token."
              }
            }
          },
          "default": {
            "$ref": "#/responses/GenericError"
          }
        }
      }
    },
    "/product": {
      "post": {
        "description": "Create new product",
        "operationId": "productPOST",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "default": {
            "$ref": "#/responses/GenericError"
          }
        }
      },
      "delete": {
        "description": "Delete product",
        "operationId": "productDELETE",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContent"
          },
          "default": {
            "$ref": "#/responses/GenericError"
          }
        }
      }
    }
  },
  "definitions": {
    "BrandCreate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "Either same as HTTP Status Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ID": {
      "description": "Object ID.",
      "type": "integer"
    },
    "LoginInfo": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "$ref": "#/definitions/Password"
        },
        "username": {
          "$ref": "#/definitions/Username"
        }
      }
    },
    "Password": {
      "description": "User password.",
      "type": "string",
      "format": "password",
      "maxLength": 100,
      "minLength": 1
    },
    "ProductCreate": {
      "type": "object",
      "required": [
        "name",
        "description",
        "apply",
        "price",
        "brandID"
      ],
      "properties": {
        "apply": {
          "type": "string"
        },
        "brandID": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "price": {
          "type": "integer"
        }
      }
    },
    "Success": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/ID"
        }
      }
    },
    "UserInfo": {
      "type": "object",
      "required": [
        "username",
        "token"
      ],
      "properties": {
        "token": {
          "type": "string"
        },
        "username": {
          "$ref": "#/definitions/Username"
        }
      }
    },
    "Username": {
      "description": "User login.",
      "type": "string",
      "maxLength": 32,
      "minLength": 1
    }
  },
  "responses": {
    "200": {
      "description": "The server successfully processed the request.",
      "schema": {
        "$ref": "#/definitions/Success"
      }
    },
    "GenericError": {
      "description": "Generic error response.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NoContent": {
      "description": "The server successfully processed the request and is not returning any content."
    }
  },
  "securityDefinitions": {
    "apiKey": {
      "description": "Session token.",
      "type": "apiKey",
      "name": "AdminCookie",
      "in": "header"
    }
  },
  "security": [
    {
      "apiKey": null
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Service storage brands and cosmetics.",
    "title": "Service-storage",
    "version": "0.0.1"
  },
  "basePath": "/api/storage",
  "paths": {
    "/brand": {
      "post": {
        "description": "Create new brand",
        "operationId": "brandPOST",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrandCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The server successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/Success"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete brand",
        "operationId": "brandDELETE",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The server successfully processed the request and is not returning any content."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "security": [],
        "description": "Auth method.",
        "operationId": "login",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LoginInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            },
            "headers": {
              "AdminCookie": {
                "type": "string",
                "description": "Session token."
              }
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/product": {
      "post": {
        "description": "Create new product",
        "operationId": "productPOST",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The server successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/Success"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete product",
        "operationId": "productDELETE",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The server successfully processed the request and is not returning any content."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "BrandCreate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "Either same as HTTP Status Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ID": {
      "description": "Object ID.",
      "type": "integer"
    },
    "LoginInfo": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "$ref": "#/definitions/Password"
        },
        "username": {
          "$ref": "#/definitions/Username"
        }
      }
    },
    "Password": {
      "description": "User password.",
      "type": "string",
      "format": "password",
      "maxLength": 100,
      "minLength": 1
    },
    "ProductCreate": {
      "type": "object",
      "required": [
        "name",
        "description",
        "apply",
        "price",
        "brandID"
      ],
      "properties": {
        "apply": {
          "type": "string"
        },
        "brandID": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "price": {
          "type": "integer"
        }
      }
    },
    "Success": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/ID"
        }
      }
    },
    "UserInfo": {
      "type": "object",
      "required": [
        "username",
        "token"
      ],
      "properties": {
        "token": {
          "type": "string"
        },
        "username": {
          "$ref": "#/definitions/Username"
        }
      }
    },
    "Username": {
      "description": "User login.",
      "type": "string",
      "maxLength": 32,
      "minLength": 1
    }
  },
  "responses": {
    "200": {
      "description": "The server successfully processed the request.",
      "schema": {
        "$ref": "#/definitions/Success"
      }
    },
    "GenericError": {
      "description": "Generic error response.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NoContent": {
      "description": "The server successfully processed the request and is not returning any content."
    }
  },
  "securityDefinitions": {
    "apiKey": {
      "description": "Session token.",
      "type": "apiKey",
      "name": "AdminCookie",
      "in": "header"
    }
  },
  "security": [
    {
      "apiKey": []
    }
  ]
}`))
}
