// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"io"
	"net/http"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"

	"github.com/disheshub/culinario/internal/api/generated/restapi/operations"
	"github.com/disheshub/culinario/internal/app"
)

func BuildAPI(
	swaggerSpec *loads.Document,
	ServeError func(http.ResponseWriter, *http.Request, error),
	Logger func(string, ...interface{}),

	JSONConsumer func(r io.Reader, target interface{}) error,
	MultipartformConsumer func(r io.Reader, target interface{}) error,

	JSONProducer func(w io.Writer, data interface{}) error,

	APIKeyAuth func(token string) (*app.Session, error),
	APIAuthorizer runtime.Authorizer,

	CreateIngredient func(params operations.CreateIngredientParams, principal *app.Session) operations.CreateIngredientResponder,
	CreateRecipe func(params operations.CreateRecipeParams, principal *app.Session) operations.CreateRecipeResponder,
	ExistsEmail func(params operations.ExistsEmailParams) operations.ExistsEmailResponder,
	GetIngredients func(params operations.GetIngredientsParams, principal *app.Session) operations.GetIngredientsResponder,
	GetRecipe func(params operations.GetRecipeParams) operations.GetRecipeResponder,
	GetUser func(params operations.GetUserParams) operations.GetUserResponder,
	Login func(params operations.LoginParams) operations.LoginResponder,
	NewMeasureWeight func(params operations.NewMeasureWeightParams, principal *app.Session) operations.NewMeasureWeightResponder,
	Registration func(params operations.RegistrationParams) operations.RegistrationResponder,
	RemoveIngredient func(params operations.RemoveIngredientParams, principal *app.Session) operations.RemoveIngredientResponder,
	RemoveRecipe func(params operations.RemoveRecipeParams, principal *app.Session) operations.RemoveRecipeResponder,
	RmMeasureWeight func(params operations.RmMeasureWeightParams, principal *app.Session) operations.RmMeasureWeightResponder,
	UpdateUserInfo func(params operations.UpdateUserInfoParams, principal *app.Session) operations.UpdateUserInfoResponder,
	UploadAvatar func(params operations.UploadAvatarParams, principal *app.Session) operations.UploadAvatarResponder,

	ServerShutdown func(),

) *operations.CulinarioAPI {
	api := operations.NewCulinarioAPI(swaggerSpec)

	if ServeError != nil {
		api.ServeError = errors.ServeError
	}

	if Logger != nil {
		api.Logger = Logger
	}

	if JSONConsumer != nil {
		api.JSONConsumer = runtime.ConsumerFunc(JSONConsumer)
	}

	if MultipartformConsumer != nil {
		api.MultipartformConsumer = runtime.ConsumerFunc(MultipartformConsumer)
	}

	if JSONProducer != nil {
		api.JSONProducer = runtime.ProducerFunc(JSONProducer)
	}

	if APIKeyAuth != nil {
		api.APIKeyAuth = APIKeyAuth
	}
	if APIAuthorizer != nil {
		api.APIAuthorizer = APIAuthorizer
	}

	if CreateIngredient != nil {
		api.CreateIngredientHandler = operations.CreateIngredientHandlerFunc(CreateIngredient)
	}

	if CreateRecipe != nil {
		api.CreateRecipeHandler = operations.CreateRecipeHandlerFunc(CreateRecipe)
	}

	if ExistsEmail != nil {
		api.ExistsEmailHandler = operations.ExistsEmailHandlerFunc(ExistsEmail)
	}

	if GetIngredients != nil {
		api.GetIngredientsHandler = operations.GetIngredientsHandlerFunc(GetIngredients)
	}

	if GetRecipe != nil {
		api.GetRecipeHandler = operations.GetRecipeHandlerFunc(GetRecipe)
	}

	if GetUser != nil {
		api.GetUserHandler = operations.GetUserHandlerFunc(GetUser)
	}

	if Login != nil {
		api.LoginHandler = operations.LoginHandlerFunc(Login)
	}

	if NewMeasureWeight != nil {
		api.NewMeasureWeightHandler = operations.NewMeasureWeightHandlerFunc(NewMeasureWeight)
	}

	if Registration != nil {
		api.RegistrationHandler = operations.RegistrationHandlerFunc(Registration)
	}

	if RemoveIngredient != nil {
		api.RemoveIngredientHandler = operations.RemoveIngredientHandlerFunc(RemoveIngredient)
	}

	if RemoveRecipe != nil {
		api.RemoveRecipeHandler = operations.RemoveRecipeHandlerFunc(RemoveRecipe)
	}

	if RmMeasureWeight != nil {
		api.RmMeasureWeightHandler = operations.RmMeasureWeightHandlerFunc(RmMeasureWeight)
	}

	if UpdateUserInfo != nil {
		api.UpdateUserInfoHandler = operations.UpdateUserInfoHandlerFunc(UpdateUserInfo)
	}

	if UploadAvatar != nil {
		api.UploadAvatarHandler = operations.UploadAvatarHandlerFunc(UploadAvatar)
	}

	if ServerShutdown != nil {
		api.ServerShutdown = ServerShutdown
	}

	return api
}
