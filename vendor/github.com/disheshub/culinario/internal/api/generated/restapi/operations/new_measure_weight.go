// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/disheshub/culinario/internal/app"
	middleware "github.com/go-openapi/runtime/middleware"
)

// NewMeasureWeightHandlerFunc turns a function with the right signature into a new measure weight handler
type NewMeasureWeightHandlerFunc func(NewMeasureWeightParams, *app.Session) NewMeasureWeightResponder

// Handle executing the request and returning a response
func (fn NewMeasureWeightHandlerFunc) Handle(params NewMeasureWeightParams, principal *app.Session) NewMeasureWeightResponder {
	return fn(params, principal)
}

// NewMeasureWeightHandler interface for that can handle valid new measure weight params
type NewMeasureWeightHandler interface {
	Handle(NewMeasureWeightParams, *app.Session) NewMeasureWeightResponder
}

// NewNewMeasureWeight creates a new http.Handler for the new measure weight operation
func NewNewMeasureWeight(ctx *middleware.Context, handler NewMeasureWeightHandler) *NewMeasureWeight {
	return &NewMeasureWeight{Context: ctx, Handler: handler}
}

/*NewMeasureWeight swagger:route POST /weight newMeasureWeight

NewMeasureWeight new measure weight API

*/
type NewMeasureWeight struct {
	Context *middleware.Context
	Handler NewMeasureWeightHandler
}

func (o *NewMeasureWeight) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNewMeasureWeightParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *app.Session
	if uprinc != nil {
		principal = uprinc.(*app.Session) // this is really a app.Session, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
