// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/disheshub/culinario/internal/app"
	middleware "github.com/go-openapi/runtime/middleware"
)

// RemoveIngredientHandlerFunc turns a function with the right signature into a remove ingredient handler
type RemoveIngredientHandlerFunc func(RemoveIngredientParams, *app.Session) RemoveIngredientResponder

// Handle executing the request and returning a response
func (fn RemoveIngredientHandlerFunc) Handle(params RemoveIngredientParams, principal *app.Session) RemoveIngredientResponder {
	return fn(params, principal)
}

// RemoveIngredientHandler interface for that can handle valid remove ingredient params
type RemoveIngredientHandler interface {
	Handle(RemoveIngredientParams, *app.Session) RemoveIngredientResponder
}

// NewRemoveIngredient creates a new http.Handler for the remove ingredient operation
func NewRemoveIngredient(ctx *middleware.Context, handler RemoveIngredientHandler) *RemoveIngredient {
	return &RemoveIngredient{Context: ctx, Handler: handler}
}

/*RemoveIngredient swagger:route DELETE /ingredient removeIngredient

RemoveIngredient remove ingredient API

*/
type RemoveIngredient struct {
	Context *middleware.Context
	Handler RemoveIngredientHandler
}

func (o *RemoveIngredient) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRemoveIngredientParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *app.Session
	if uprinc != nil {
		principal = uprinc.(*app.Session) // this is really a app.Session, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
