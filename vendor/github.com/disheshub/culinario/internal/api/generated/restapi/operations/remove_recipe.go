// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/disheshub/culinario/internal/app"
	middleware "github.com/go-openapi/runtime/middleware"
)

// RemoveRecipeHandlerFunc turns a function with the right signature into a remove recipe handler
type RemoveRecipeHandlerFunc func(RemoveRecipeParams, *app.Session) RemoveRecipeResponder

// Handle executing the request and returning a response
func (fn RemoveRecipeHandlerFunc) Handle(params RemoveRecipeParams, principal *app.Session) RemoveRecipeResponder {
	return fn(params, principal)
}

// RemoveRecipeHandler interface for that can handle valid remove recipe params
type RemoveRecipeHandler interface {
	Handle(RemoveRecipeParams, *app.Session) RemoveRecipeResponder
}

// NewRemoveRecipe creates a new http.Handler for the remove recipe operation
func NewRemoveRecipe(ctx *middleware.Context, handler RemoveRecipeHandler) *RemoveRecipe {
	return &RemoveRecipe{Context: ctx, Handler: handler}
}

/*RemoveRecipe swagger:route DELETE /recipe removeRecipe

RemoveRecipe remove recipe API

*/
type RemoveRecipe struct {
	Context *middleware.Context
	Handler RemoveRecipeHandler
}

func (o *RemoveRecipe) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRemoveRecipeParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *app.Session
	if uprinc != nil {
		principal = uprinc.(*app.Session) // this is really a app.Session, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
