// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewRecipe new recipe
// swagger:model NewRecipe
type NewRecipe struct {

	// Cooking time.
	// Required: true
	CookingTime *int32 `json:"cookingTime"`

	// Description recipe.
	// Required: true
	// Min Length: 1
	Description *string `json:"description"`

	// ingredients
	// Required: true
	Ingredients []*NewRecipeIngredientsItems0 `json:"ingredients"`

	// Recipe name.
	// Required: true
	// Max Length: 100
	// Min Length: 1
	Name *string `json:"name"`

	// steps
	// Required: true
	Steps []*NewRecipeStepsItems0 `json:"steps"`
}

// Validate validates this new recipe
func (m *NewRecipe) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCookingTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngredients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSteps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewRecipe) validateCookingTime(formats strfmt.Registry) error {

	if err := validate.Required("cookingTime", "body", m.CookingTime); err != nil {
		return err
	}

	return nil
}

func (m *NewRecipe) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 1); err != nil {
		return err
	}

	return nil
}

func (m *NewRecipe) validateIngredients(formats strfmt.Registry) error {

	if err := validate.Required("ingredients", "body", m.Ingredients); err != nil {
		return err
	}

	for i := 0; i < len(m.Ingredients); i++ {
		if swag.IsZero(m.Ingredients[i]) { // not required
			continue
		}

		if m.Ingredients[i] != nil {
			if err := m.Ingredients[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingredients" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NewRecipe) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 100); err != nil {
		return err
	}

	return nil
}

func (m *NewRecipe) validateSteps(formats strfmt.Registry) error {

	if err := validate.Required("steps", "body", m.Steps); err != nil {
		return err
	}

	for i := 0; i < len(m.Steps); i++ {
		if swag.IsZero(m.Steps[i]) { // not required
			continue
		}

		if m.Steps[i] != nil {
			if err := m.Steps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("steps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewRecipe) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewRecipe) UnmarshalBinary(b []byte) error {
	var res NewRecipe
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NewRecipeIngredientsItems0 new recipe ingredients items0
// swagger:model NewRecipeIngredientsItems0
type NewRecipeIngredientsItems0 struct {

	// count
	Count int64 `json:"count,omitempty"`

	// id
	ID ID `json:"id,omitempty"`
}

// Validate validates this new recipe ingredients items0
func (m *NewRecipeIngredientsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewRecipeIngredientsItems0) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewRecipeIngredientsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewRecipeIngredientsItems0) UnmarshalBinary(b []byte) error {
	var res NewRecipeIngredientsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NewRecipeStepsItems0 new recipe steps items0
// swagger:model NewRecipeStepsItems0
type NewRecipeStepsItems0 struct {

	// What step.
	Number int32 `json:"number,omitempty"`

	// Description step.
	Text string `json:"text,omitempty"`
}

// Validate validates this new recipe steps items0
func (m *NewRecipeStepsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NewRecipeStepsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewRecipeStepsItems0) UnmarshalBinary(b []byte) error {
	var res NewRecipeStepsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
